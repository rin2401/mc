/**
 *	@author Nguyen Hua Phung
 *	@version 1.0
 *	23/10/2015
 * 	This file provides a simple version of code generator
 *
 */

package mc.codegen

import mc.checker._
import mc.utils._
import java.io.{PrintWriter, File}

object CodeGenerator extends Utils {
	val libName = "io"
	def init() = List(	Symbol("getInt",FunctionType(List(),IntType),CName(libName)),
						Symbol("putInt",FunctionType(List(IntType),VoidType),CName(libName)),
						Symbol("putIntLn",FunctionType(List(IntType),VoidType),CName(libName)),
						Symbol("getFloat",FunctionType(List(),FloatType),CName(libName)),
						Symbol("putFloat",FunctionType(List(FloatType),VoidType),CName(libName)),
						Symbol("putFloatLn",FunctionType(List(FloatType),VoidType),CName(libName)),
						Symbol("putBool",FunctionType(List(BoolType),VoidType),CName(libName)),
						Symbol("putBoolLn",FunctionType(List(BoolType),VoidType),CName(libName)),
						Symbol("putString",FunctionType(List(StringType),VoidType),CName(libName)),
						Symbol("putStringLn",FunctionType(List(StringType),VoidType),CName(libName)),
						Symbol("putLn",FunctionType(List(),VoidType),CName(libName))
					)
	def gen(ast:AST,dir:File) = {
		val gl = init()		 
		val gc = new CodeGenVisitor(ast,gl,dir)		
		gc.visit(ast, null)	 
	}
}

case class ClassType(cname:String) extends Type

//case class SubContext(emit:Emitter,decl:List[Decl]) 

case class SubBody(frame:Frame,sym:List[Symbol]) 

class Access(val frame:Frame,val sym:List[Symbol],val isLeft:Boolean,val isFirst:Boolean)

trait Val
	case class Index(value:Int) extends Val
	case class CName(value:String) extends Val

class CodeGenVisitor(astTree:AST,env:List[Symbol],dir:File) extends BaseVisitor with Utils {
	val className = "MCClass"
	val path = dir.getPath()
	val emit = new Emitter(path+"/"+className+".j")
	/** generate code for default constructor 

	 *	@param consdecl the function declaration whose code will be generated by this method
	 *	@param frame the frame where the initialization happen 
	 *	@param o the referencing environment
	 */
	def genMETHOD(ast:FuncDecl,o:Any,frame:Frame) = {	
		val isInit = ast.name.name == "<init>" && ast.returnType == null
		val isClinit = ast.name.name == "<clinit>" && ast.returnType == null		
		val isMain = ast.name.name == "main" && ast.param.length == 0 && ast.returnType == VoidType
		val methodName = ast.name.name
		val input = if (isMain) List(ArrayPointerType(StringType)) else ast.param.map(_.varType)
		val output = if(isInit||isClinit) VoidType else ast.returnType
		val mtype =	FunctionType(input,output)
		
		emit.printout(emit.emitMETHOD(methodName, mtype, !isInit, frame))
		frame.enterScope(true);
		val glenv = o.asInstanceOf[List[Symbol]]
		//Generate code for parameter declarations
		val sym = if (isInit) {
			emit.printout(emit.emitVAR(frame.getNewIndex,"this",ClassType(className),frame.getStartLabel,frame.getEndLabel,frame))
			glenv
		}
		else if (isMain) {
			emit.printout(emit.emitVAR(frame.getNewIndex,"args",ArrayPointerType(StringType),frame.getStartLabel,frame.getEndLabel,frame))
			glenv
		}
		else //other
			ast.param.foldLeft(glenv)((lst,x) => visit(x,frame).asInstanceOf[Symbol]::lst)	

		//visit body
		if (isInit) {
			emit.printout(emit.emitLABEL(frame.getStartLabel(),frame))
			emit.printout(emit.emitREADVAR("this",ClassType(className),0,frame))
			emit.printout(emit.emitINVOKESPECIAL(frame))
			emit.printout(emit.emitLABEL(frame.getEndLabel(),frame))
		}
		else if(isClinit){
			ast.body.asInstanceOf[Block].decl.map(x => {
				val lexeme = className + "." + x.asInstanceOf[VarDecl].variable.name
				emit.printout(emit.emitINITARRAY(lexeme,x.asInstanceOf[VarDecl].varType,frame))
			})
		}
		else {
			val body = ast.body.asInstanceOf[Block]
			val nsym = body.decl.foldLeft(sym)((lst,x) => visit(x,frame).asInstanceOf[Symbol]::lst)
			emit.printout(emit.emitLABEL(frame.getStartLabel(),frame))
			body.stmt.map(visitStmt(_,frame,nsym))
			emit.printout(emit.emitLABEL(frame.getEndLabel(),frame))
		}

		//if (output == VoidType) emit.printout(emit.emitRETURN(VoidType,frame))
		// output match {
		// 	case VoidType => null 
		// 	case IntType|BoolType => emit.printout(emit.emitPUSHCONST("0",output,frame))
		// 	case FloatType => emit.printout(emit.emitPUSHCONST("0.0",output,frame))
		// 	case _ => emit.printout(emit.emitPUSHNULL(frame))
		// } 
		emit.printout(emit.emitRETURN(output,frame))
		emit.printout(emit.emitENDMETHOD(frame))
		frame.exitScope();
	}
	
	override def visitProgram(ast:Program,o:Any) = {
		emit.printout(emit.emitPROLOG(className, "java.lang.Object"))		
		//add global declarations to env symbol list
		val sym = ast.decl.foldLeft(env)((lst,x) => {
			val s = x match {
				case VarDecl(_,_) => visit(x,null).asInstanceOf[Symbol]
				case FuncDecl(n,p,rt,_) => Symbol(n.name,FunctionType(p.map(_.varType),rt),CName(className))
			}
			s::lst
		})
		//visit function declarations
  		ast.decl.filter(_.isInstanceOf[FuncDecl]).map(visit(_,SubBody(null,sym)))
		// generate default constructor 
		genMETHOD(FuncDecl(Id("<init>"),List(),null,Block(List(),List())),o,new Frame("<init>",VoidType))
		// generate clinit static array
		val arr = ast.decl.filter(x => x match {
			case VarDecl(_,ArrayType(_,_)) => true
			case _ =>  false 
		})
		if(arr.size > 0) genMETHOD(FuncDecl(Id("<clinit>"),List(),null,Block(arr,List())),o,new Frame("<clinit>",VoidType))		
		
		emit.emitEPILOG()

	}
//Declaration

	override def visitFuncDecl(ast:FuncDecl,o:Any) = {
		val sub = o.asInstanceOf[SubBody]
		val frame = new Frame(ast.name.name,ast.returnType)
		genMETHOD(ast,sub.sym,frame)
	}

	override def visitVarDecl(ast:VarDecl,o:Any) = {
		val frame = o.asInstanceOf[Frame]
		val mtype = ast.varType
		val name = ast.variable.name
		
		if(frame == null){
			emit.printout(emit.emitATTRIBUTE(name,mtype,false,null))
			Symbol(name,mtype,CName(className))
		}
		else { 			
			val index = frame.getNewIndex
			emit.printout(emit.emitVAR(index,name,mtype,frame.getStartLabel,frame.getEndLabel,frame))
			if(mtype.isInstanceOf[ArrayType]) emit.printout(emit.emitINITARRAY(index,mtype,frame)) 
			Symbol(name,mtype,Index(index))
		}  
	}
		
//Statement

	def visitStmt(ast:Stmt,frame:Frame,sym:List[Symbol]) = {
		if(ast.isInstanceOf[Expr]) {
			val e = visit(ast,new Access(frame,sym,false,true)).asInstanceOf[(String,Type)]
			emit.printout(e._1)
			if(e._2 != VoidType) emit.printout(emit.emitPOP(frame))	
		}
		else visit(ast,SubBody(frame,sym))
	}

	def visitExpr(ast:Expr,frame:Frame,sym:List[Symbol],isLeft:Boolean=false) = visit(ast,new Access(frame,sym,isLeft,false)).asInstanceOf[(String,Type)]

	override def visitBlock(ast:Block,o:Any) = {
		val sub = o.asInstanceOf[SubBody]
		val frame = sub.frame
		val sym = sub.sym
		frame.enterScope(false)
		val nsym = ast.decl.foldLeft(sym)((lst,x) => visit(x,frame).asInstanceOf[Symbol]::lst)			
		emit.printout(emit.emitLABEL(frame.getStartLabel(),frame))		
		val isReturn = ast.stmt.map(visitStmt(_,frame,nsym)).exists(_==true)
		emit.printout(emit.emitLABEL(frame.getEndLabel(),frame))
		frame.exitScope()
	}

	override def visitIf(ast:If,o:Any) = {
		val sub = o.asInstanceOf[SubBody]
		val frame = sub.frame
		val sym = sub.sym

		val exp = visitExpr(ast.expr,frame,sym)
		emit.printout(exp._1)
		val trueLabel = frame.getNewLabel()
		val falseLabel = frame.getNewLabel()
		emit.printout(emit.emitIFFALSE(falseLabel,frame))
		visitStmt(ast.thenStmt,frame,sym)
		emit.printout(emit.emitGOTO(trueLabel,frame))
		emit.printout(emit.emitLABEL(falseLabel,frame))
		if(ast.elseStmt != None) visitStmt(ast.elseStmt.get,frame,sym) else false
		emit.printout(emit.emitLABEL(trueLabel,frame))
	}

	override def visitFor(ast:For,o:Any) = {
		val sub = o.asInstanceOf[SubBody]
		val frame = sub.frame
		val sym = sub.sym		
		
		frame.enterLoop()
		val inLabel = frame.getNewLabel()		
		val breLabel = frame.getBreakLabel()
		val conLabel = frame.getContinueLabel()

		visitStmt(ast.expr1,frame,sym)
		emit.printout(emit.emitLABEL(inLabel,frame))
		val e2 = visitExpr(ast.expr2,frame,sym)
		emit.printout(e2._1)
		emit.printout(emit.emitIFFALSE(breLabel,frame))
		visitStmt(ast.loop,frame,sym)
		emit.printout(emit.emitLABEL(conLabel,frame))
		visitStmt(ast.expr3,frame,sym)
		emit.printout(emit.emitGOTO(inLabel,frame))		
		emit.printout(emit.emitLABEL(breLabel,frame))		
		frame.exitLoop()
	}

	override def visitDowhile(ast:Dowhile,o:Any) = {
		val sub = o.asInstanceOf[SubBody]
		val frame = sub.frame
		val sym = sub.sym		

		val inLabel = frame.getNewLabel()
	
		frame.enterLoop()
		val breLabel = frame.getBreakLabel()
		val conLabel = frame.getContinueLabel()	
		emit.printout(emit.emitLABEL(inLabel,frame))
		ast.sl.map(visitStmt(_,frame,sym))
		emit.printout(emit.emitLABEL(conLabel,frame))
		val e = visitExpr(ast.exp,frame,sym)
		emit.printout(e._1)
		emit.printout(emit.emitIFTRUE(inLabel,frame))
		emit.printout(emit.emitLABEL(breLabel,frame))
		frame.exitLoop()
	}

	override def visitBreak(ast:Break.type,o:Any) = {
		val frame = o.asInstanceOf[SubBody].frame
		emit.printout(emit.emitGOTO(frame.getBreakLabel(),frame))
	}

	override def visitContinue(ast:Continue.type,o:Any) = {
		val frame = o.asInstanceOf[SubBody].frame
		emit.printout(emit.emitGOTO(frame.getContinueLabel(),frame))
	}

	override def visitReturn(ast:Return,o:Any) = {
		val sub = o.asInstanceOf[SubBody]
		val frame = sub.frame
		val sym = sub.sym
		if(ast.expr != None) {
			val e = visitExpr(ast.expr.get,frame,sym)
			emit.printout(e._1)
			if(e._2 == IntType && frame.returnType == FloatType) emit.printout(emit.emitI2F(frame))
		}
		emit.printout(emit.emitGOTO(1,frame))
	}

//Expression
	override def visitBinaryOp(ast:BinaryOp,o:Any) = {
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame
		val sym = sub.sym
		val buffer = new StringBuffer()
		ast.op match {
			case "=" => {
				if(ast.left.isInstanceOf[ArrayCell]){
					val l = visitExpr(ast.left,frame,sym,true)
					buffer.append(l._1)					
					val r = visitExpr(ast.right,frame,sym)
					buffer.append(r._1)
					if(r._2!=l._2) buffer.append(emit.emitI2F(frame))
					buffer.append(emit.emitDUPX2(frame))					
					buffer.append(emit.emitASTORE(l._2,frame))
					(buffer.toString,l._2)
				}
				else {
					val r = visitExpr(ast.right,frame,sym)
					buffer.append(r._1)
					buffer.append(emit.emitDUP(frame))	
					val l = visitExpr(ast.left,frame,sym,true)										
					if(r._2!=l._2) buffer.append(emit.emitI2F(frame))					
					buffer.append(l._1)
					(buffer.toString,l._2)
				}
			}
			case "%" => {
				val l = visitExpr(ast.left,frame,sym)
				val r = visitExpr(ast.right,frame,sym)
				buffer.append(l._1)
				buffer.append(r._1)
				buffer.append(emit.emitMOD(frame))
				(buffer.toString,l._2)
			} 
			case "&&" => {
				val l = visitExpr(ast.left,frame,sym)
				val r = visitExpr(ast.right,frame,sym)
				val labelF = frame.getNewLabel();
				val labelT = frame.getNewLabel();
				buffer.append(l._1)
				buffer.append(emit.emitIFFALSE(labelF,frame))
				buffer.append(r._1)
				buffer.append(emit.emitIFFALSE(labelF,frame))
				buffer.append(emit.emitPUSHCONST("1", IntType,frame))
				frame.pop()
				buffer.append(emit.emitGOTO(labelT,frame))
				buffer.append(emit.emitLABEL(labelF,frame))
				buffer.append(emit.emitPUSHCONST("0", IntType,frame))
				buffer.append(emit.emitLABEL(labelT,frame))				
				(buffer.toString,l._2)
			}
			case "||" => {
				val l = visitExpr(ast.left,frame,sym)
				val r = visitExpr(ast.right,frame,sym)
				val labelF = frame.getNewLabel();
				val labelT = frame.getNewLabel();
				buffer.append(l._1)
				buffer.append(emit.emitIFTRUE(labelT,frame))
				buffer.append(r._1)
				buffer.append(emit.emitIFTRUE(labelT,frame))
				buffer.append(emit.emitPUSHCONST("0", IntType,frame))
				frame.pop()
				buffer.append(emit.emitGOTO(labelF,frame))
				buffer.append(emit.emitLABEL(labelT,frame))
				buffer.append(emit.emitPUSHCONST("1", IntType,frame))
				buffer.append(emit.emitLABEL(labelF,frame))	
				(buffer.toString,l._2)
			} 
			case _ => {
				val l = visitExpr(ast.left,frame,sym)
				val r = visitExpr(ast.right,frame,sym)
				val otype = if(l._2==FloatType||r._2==FloatType) FloatType else l._2
				buffer.append(l._1)
				if(l._2 != otype) buffer.append(emit.emitI2F(frame)) 
				buffer.append(r._1)
				if(r._2 != otype) buffer.append(emit.emitI2F(frame)) 
				val rtype = ast.op match {
					case ("+"|"-") => {
						buffer.append(emit.emitADDOP(ast.op,otype,frame))
						otype
					}
					case ("*"|"/") => {
						buffer.append(emit.emitMULOP(ast.op,otype,frame))
						otype
					}
					case (">"|"<"|">="|"<="|"=="|"!=") => { 
						buffer.append(emit.emitREOP(ast.op,otype,frame))
						BoolType
					}
				}
				(buffer.toString,rtype)
			}			  
		}
	}

	override def visitUnaryOp(ast:UnaryOp,o:Any) = {
		val buffer = new StringBuffer()
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame
		val sym = sub.sym
		val b = visit(ast.body,new Access(frame,sym,false,false)).asInstanceOf[(String,Type)]
		buffer.append(b._1)
		ast.op match {
			case "-" => buffer.append(emit.emitNEGOP(b._2,frame)) 
			case "!" => buffer.append(emit.emitNOT(b._2,frame))
		}
		(buffer.toString,b._2) 
	}

	override def visitCallExpr(ast:CallExpr,o:Any) = {
		val buffer = new StringBuffer()		
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame
		val sym = sub.sym
		val s = lookup(ast.method.name,sym,(x:Symbol)=>x.name).get
		val cname = s.value.asInstanceOf[CName].value
		val ftype = s.typ.asInstanceOf[FunctionType]
		val in = ast.params.zip(ftype.input).foldLeft(("",List[Type]()))((y,x) => {
			val (str1,typ1) = visitExpr(x._1,frame,sym)
			val str2 =  if(typ1==IntType && x._2==FloatType) str1 + emit.emitI2F(frame) else str1   
			(y._1 + str2,y._2 :+ typ1)
		})
		buffer.append(in._1)	
		buffer.append(emit.emitINVOKESTATIC(cname+"/"+ast.method.name,ftype,frame))
		(buffer.toString,ftype.output)		
	}

//LHS
	override def visitId(ast:Id,o:Any) = {
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame
		val sym = lookup(ast.name,sub.sym,(s:Symbol)=>s.name).get
		val mtype = sym.typ
		sym.value match {
			case Index(index) => { 
				val name = sym.name
				if(sub.isLeft)
					(emit.emitWRITEVAR(name,mtype,index,frame),mtype)
				else
					(emit.emitREADVAR(name,mtype,index,frame),mtype)
			}
			case CName(cname) => {
				val name = className+"."+sym.name		
				if(sub.isLeft) 					
					(emit.emitPUTSTATIC(name,mtype,frame),mtype)
				else
					(emit.emitGETSTATIC(name,mtype,frame),mtype)
			}
		}
	}

	override def visitArrayCell(ast:ArrayCell,o:Any) = {
		val buffer = new StringBuffer()
		val sub = o.asInstanceOf[Access]
		val sym = sub.sym
		val frame = sub.frame
		val arr = visitExpr(ast.arr,frame,sym).asInstanceOf[(String,Type)]
		val idx = visitExpr(ast.idx,frame,sym).asInstanceOf[(String,Type)]		
		val et = arr._2 match {
			case ArrayType(_,t) => t 
			case ArrayPointerType(t) => t 
		}
		buffer.append(arr._1)
		buffer.append(idx._1)					
		if(!sub.isLeft) buffer.append(emit.emitALOAD(et,frame))
		(buffer.toString,et)
	}

//Literal
	override def visitIntLiteral(ast:IntLiteral,o:Any) = {
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame
		(emit.emitPUSHCONST(ast.value.toString,IntType,frame),IntType)
	}

	override def visitFloatLiteral(ast:FloatLiteral,o:Any) = {
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame
		(emit.emitPUSHCONST(ast.value.toString,FloatType,frame),FloatType)
	}
	
	override def visitStringLiteral(ast:StringLiteral,o:Any) = {
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame
		(emit.emitPUSHCONST(ast.value,StringType,frame),StringType)
	}

	override def visitBooleanLiteral(ast:BooleanLiteral,o:Any) = {
		val sub = o.asInstanceOf[Access]
		val frame = sub.frame		
		(emit.emitPUSHCONST(ast.value.toString,BoolType,frame),BoolType)
	}

}